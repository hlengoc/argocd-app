

name: Daily report for Copilot reviews

on:
  # schedule:
  #   - cron: "00 10 * * *" # every day at 10:00 AM UTC - 17:00 AM Vietnam time
  # workflow_dispatch:
    push:
      branches:
        - main

jobs:
  fetch-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (not needed, but often standard)
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install requests

      - name: Fetch PRs and send email
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_ORG }}
          ORG_NAME: Hillspire
          GMAIL_USER: hlengoc.fpt@hillspire.com
          GMAIL_PASS: ${{ secrets.GMAIL_APP_PASSWORD }}
        run: |
          python -c "
          import os
          from datetime import datetime, timezone
          import requests
          import smtplib
          from email.mime.text import MIMEText

          headers = {
              'Authorization': f'token {os.environ[\"GH_TOKEN\"]}',
              'Accept': 'application/vnd.github+json'
          }

          def get_repos(org):
              repos = []
              page = 1
              while True:
                  r = requests.get(f'https://api.github.com/orgs/{org}/repos?per_page=100&page={page}', headers=headers)
                  if r.status_code != 200 or not r.json():
                      break
                  repos.extend(r.json())
                  page += 1
              return [repo['name'] for repo in repos]

          def get_pull_requests(org, repo):
              today = datetime.now(timezone.utc).strftime('%Y-%m-%d')
              params = {
                    'state': 'all',
                    'sort': 'created',
                    'direction': 'desc',
                    'per_page': 30
                }
              print(today)
              r = requests.get(f'https://api.github.com/repos/{org}/{repo}/pulls', headers=headers, params=params)
              # for pr in r.json():
              #   print(pr['state'])
              #   print(pr['created_at'].split('T')[0])
              #   print('--------------------------------------------------------------')
              #   if pr['created_at'].split('T')[0] == today:
              #     print(pr['number'])
              open_prs = [pr for pr in r.json() if (pr['created_at'].split('T')[0] == today) and (pr['state'] == 'open')]
              closed_prs = [pr for pr in r.json() if (pr['created_at'].split('T')[0] == today) and (pr['state'] == 'closed')]
              print(len(open_prs))
              print(len(closed_prs))
              return (open_prs, closed_prs) if r.status_code == 200 else []


          def list_comments_by_copilot(org, repo, pr_number):
              list_comments = ''
              comments_url = f'https://api.github.com/repos/{org}/{repo}/pulls/{pr_number}/reviews'
              r = requests.get(comments_url, headers=headers)
              # print(r.json())
              for comment in r.json():
                if comment['user']['login'] == 'copilot-pull-request-reviewer[bot]':
                  list_comments = list_comments + '------- Review by copilot:'  + '\n' + comment['body'] + '\n\n'
              return list_comments 
              
          
          org = os.environ['ORG_NAME']
          repos = get_repos(org)
          repos = ['app.accountingdashboard']
          body = '************* Daily report for Copilot reviews in Hillspire repositories *************\n\n\n'
          for repo in repos:
              body += f'List of open PR todays\n\n'
              open_prs = get_pull_requests(org, repo)[0]
              if not len(open_prs):
                  continue
              num_copilot_comments = 0
              pr_body = ''
              for pr in open_prs:
                  # print(pr['number'])
                  # list_comments_by_copilot(org, repo, pr['number'])
                  if not list_comments_by_copilot(org, repo, pr['number']):
                      continue
                  num_copilot_comments += 1    
                  pr_body += f'--- PR #{pr['number']}: {pr['title']} ({pr['html_url']})\n\n'
                  pr_body += list_comments_by_copilot(org, repo, pr['number'])
              if num_copilot_comments == 0:
                  continue
              else:
                  body += f'Repository: {repo}\n\n'
                  body += pr_body  
                  body += '------------------------------------------------------------------------------------------------------------------------------------------\n'
                  body += '--------------------------------------------------------------------------------------------------\n\n\n' 

  
          print('Email body:')          
          print(body)

          # msg = MIMEText(body)
          # msg['Subject'] = f'Daily Report for Copilot reviews in Hillspire repositories'
          # msg['From'] = os.environ['GMAIL_USER']
          # # msg['To'] = 'enterprise-app-dev@hillspire.com'
          # recipients = ['hlengoc.fpt@hillspire.com', 'enterprise-app-dev@hillspire.com']
          # msg['To'] = ', '.join(recipients)

          # with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
          #     server.login(os.environ['GMAIL_USER'], os.environ['GMAIL_PASS'])
          #     server.sendmail(msg['From'], recipients, msg.as_string())

          
          #####################################################

          # html_content = f'''
          # <html>
          #   <body>
          #     <p>{body}</p>
          #   </body>
          # </html>
          # '''
          # msg = MIMEText(html_content, 'html')

          # msg['Subject'] = f'Html email for daily report'
          # msg['From'] = os.environ['GMAIL_USER']
          # msg['To'] = 'hlengoc.fpt@hillspire.com'  # or use dynamic address

          # with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
          #     server.login(os.environ['GMAIL_USER'], os.environ['GMAIL_PASS'])
          #     server.sendmail(msg['From'], [msg['To']], msg.as_string())

          "